

pragma solidity ^0.5.0;

// lvl 1: equal split
contract AssociateProfitSplitter {
    // Create three payable addresses representing `employee_one`, `employee_two` and `employee_three`.
    
    address payable employee_one;
    address payable employee_two;
    address payable employee_three;

    constructor(address payable _one, address payable _two, address payable _three) public {
        employee_one = _one;
        employee_two = _two;
        employee_three = _three;
    }


    function balance() public view returns(uint) {
        return address(this).balance;
        
    }
    
    function checkbalance() public view returns(uint) {
        return address(employee_one).balance;
        
    }
    
    // Initiate deposit, divides by 3, transfers to each account, then returns remaining balance to sender
    function deposit() public payable {
        // @TODO: Split `msg.value` into three
        uint amount = msg.value / 3;
        employee_one.transfer(amount);
        employee_two.transfer(amount);
        employee_three.transfer(amount);
        msg.sender.transfer(msg.value - amount * 3);

    }
    

    function() external payable {
        // @TODO: Enforce that the `deposit` function is called in the fallback function!
        // Your code here!
        deposit();
        
    }
}

    // employee_one adress 0xfce29e92D2C8AE9c88a435B46fDC14a882AD6397
    // employee_two address 0x5FDAA6b664CDF901e9c02d6608e26bd96649268D
    // employee_three address 0x9A0CFD0a90C4dC8404200ACA46b971c48b2684ab
    
    // exectued contract 0x6458ae44774c3Be8d4f6CA5b6FEC5affd398BC58